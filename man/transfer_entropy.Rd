% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transfer_entropy.R
\name{transfer_entropy}
\alias{transfer_entropy}
\title{Calculates Shannon and Renyi transfer entropy between two time series.}
\usage{
transfer_entropy(x, y, lx = 1, ly = 1, q = 0.1, entropy = "Shannon",
  constx = NULL, consty = NULL, nreps = 2, shuffles = 50,
  cl = parallel::detectCores() - 1, type = "quantiles", quantiles = c(5,
  95), bins = NULL, limits = NULL, nboot = 300, burn = 50,
  quiet = FALSE, seed = NULL)
}
\arguments{
\item{x}{vector of values, ordered by time}

\item{y}{vector of values, ordered by time}

\item{lx}{Markov order of x, i.e. number of lagged values affecting the
current value; default is 1}

\item{ly}{Markov order of y, i.e. number of lagged values affecting the
current value; default is 1}

\item{q}{weighting parameter in Renyi transfer entropy between 0 and 1;
at \code{q = 1}, Renyi transfer entropy converges to Shannon
transfer entropy; default is 0.1}

\item{entropy}{transfer entropy measure that is calculated, either 'Shannon'
or 'Renyi'; first character can be used as well;
default is Shannon}

\item{constx}{constant value subtracted from transfer entropy measure Y->X;
default is NULL (no constant value is subtracted)}

\item{consty}{constant value subtracted from transfer entropy measure X->Y;
default is NULL (no constant value is subtracted}

\item{nreps}{number of replications for each shuffle; default is 2}

\item{shuffles}{number of shuffles; default is 50}

\item{cl}{numeric value (default is number of cores - 1),
or a cluster as created by \code{\link[parallel]{makeCluster}}
that can be used by \code{\link[pbapply]{pbapply}}}

\item{type}{'quantiles', 'bins' or 'limits' to discretize the data; default
is 'quantiles'}

\item{quantiles}{quantiles of empirical distribution used for discretization}

\item{bins}{number of bins with equal width used for discretization}

\item{limits}{user determined limits on values used for discretization}

\item{nboot}{number of bootstrap replications; default is 300}

\item{burn}{number of observations that are dropped from the beginning of
the bootstrapped Markov chain; default is 50}

\item{quiet}{if FALSE (default), the function gives feedback}

\item{seed}{a seed that seeds the PRNG (will internally just call set.seed),
default is NULL}
}
\value{
an object of class TEResult, containing the entropy measure, the
        effective transfer entropy measure, standard errors, p-values,
        indication of statistical significance, quantiles of bootstrap
        sample (if nboot > 0)
}
\description{
Calculates Shannon and Renyi transfer entropy between two time series.
}
\examples{
# construct two time-series
set.seed(1234567890)
n <- 1000
x <- rep(0, n + 1)
y <- rep(0, n + 1)

for (i in seq(n)) {
  x[i + 1] <- 0.2 * x[i] + rnorm(1, 0, 2)
  y[i + 1] <- x[i] + rnorm(1, 0, 2)
}

x <- x[-1]
y <- y[-1]

te_result <- transfer_entropy(x, y)
te_result

te_result <- transfer_entropy(x, y, nboot = 0)
te_result

is.TEResult(te_result)
}
\seealso{
\code{\link{coef}}, \code{\link{print.TEResult}}
}
