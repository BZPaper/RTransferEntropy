% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transfer_entropy.R
\name{transfer_entropy}
\alias{transfer_entropy}
\title{Wrapper for the implementation of Shannon and Renyi transfer entropy.}
\usage{
transfer_entropy(x, y, lx = 1, ly = 1, q = 0.5, entropy = "Shannon",
  constx = NULL, consty = NULL, nreps = 2, shuffles = 6,
  cl = parallel::detectCores() - 1, type = "quantiles", quantiles = c(5,
  95), bins = NULL, limits = NULL, nboot = 10, burn = 50,
  quiet = FALSE, seed = NULL)
}
\arguments{
\item{x}{a vector of values}

\item{y}{a vector of values}

\item{lx}{Markov order of x, defaults to 1}

\item{ly}{Markov order of y, defaults to 1}

\item{q}{weighting parameter in Renyi transfer entropy, defaults to 0.5}

\item{entropy}{the type of entropy calculation to use, either 'shannon'
or 'renyi', first character can be used as well, defaults to shannon.}

\item{constx}{constant value substracted from transfer entropy measure x,
default to NULL (no const)}

\item{consty}{constant value substracted from transfer entropy measure y,
default to NULL (no const)}

\item{nreps}{number of replications for each shuffle}

\item{shuffles}{number of shuffles}

\item{cl}{a numeric value (defaults to number of cores - 1),
or a cluster as created by \code{\link[parallel]{makeCluster}}
that can be used by \code{\link[pbapply]{pbapply}}}

\item{type}{bins, limits or quantiles of empirical distribution to discretize
the data}

\item{quantiles}{quantiles to use for discretization}

\item{bins}{the number of bins with equal width used for discretization}

\item{limits}{limits used for discretization}

\item{nboot}{number of bootstrap replications}

\item{burn}{number of observations that are dropped from the beginning of
the bootstrapped Markov chain}

\item{quiet}{if FALSE (default), the function gives feedback}

\item{seed}{a seed that seeds the PRNG (will internally just call set.seed), defaults to NULL}

\item{boots}{number of bootstrap samples}
}
\value{
an object of class TEResult, coontaining the entropy measure, the
  effective transfer entropy measure, standard errores, p-values, etc.
}
\description{
Wrapper for the implementation of Shannon and Renyi transfer entropy.
}
\examples{
# construct two time-series
set.seed(1234567890)
n <- 1000
x <- rep(0, n + 1)
y <- rep(0, n + 1)

for (i in seq(n)) {
  x[i + 1] <- 0.2 * x[i] + rnorm(1, 0, 2)
  y[i + 1] <- x[i] + rnorm(1, 0, 2)
}

x <- x[-1]
y <- y[-1]

te_result <- transfer_entropy(x, y)
te_result

summary(te_result)

is.TEResult(te_result)
}
